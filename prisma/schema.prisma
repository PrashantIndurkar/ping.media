generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Keyword {
//   id    Int           @id @default(autoincrement())
//   name  String        @unique
//   users UserKeyword[]
// }

// model UserKeyword {
//   id        Int @id @default(autoincrement())
//   userId    Int
//   keywordId Int

//   user    User    @relation(fields: [userId], references: [id])
//   keyword Keyword @relation(fields: [keywordId], references: [id])

//   @@unique([userId, keywordId]) // Ensure that each user can have each keyword only once
// }

model User {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(70)
  username     String         @unique @db.VarChar(100)
  email        String         @unique @db.VarChar(100)
  password     String?
  created_at   DateTime       @default(now())
  // updated_at DateTime      @updatedAt
  // city       String?
  // country    String?
  // bio        String?
  // avatar     String?
  // keywords   UserKeyword[]
  Post         Post[]
  Comment      Comment[]
  Notification Notification[]
  Likes        Likes[]
}

model Post {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  content       String
  image         String?
  comment_count Int       @default(0)
  likes_count   Int       @default(0)
  created_at    DateTime  @default(now())
  Comment       Comment[]
  Likes         Likes[]
  // now i need to store the user who liked the post
}

model Comment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  content    String
  created_at DateTime @default(now())
}

model Notification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  toUser_id  Int
  content    String
  created_at DateTime @default(now())
}

model Likes {
  id      Int  @id @default(autoincrement())
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

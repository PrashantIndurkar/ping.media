generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Likes Types
enum LikeType {
  LIKE
  DISLIKE
}

// Bookmark Types
enum BookmarkType {
  BOOKEMARED
  UNBOOKMARKED
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @db.VarChar(100)
  email         String         @unique @db.VarChar(120)
  username      String         @unique @db.VarChar(60)
  password      String?
  created_at    DateTime       @default(now())
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]
  bookmarks     Bookmark[]
  notifications Notification[]
}

model Profile {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image       String?
  // add limit to the bio field
  bio         String?      @db.VarChar(150)
  website     String?      @db.VarChar(150)
  userId      String       @unique @db.Uuid
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pronouns    String?      @db.VarChar(60)
  country     String?      @db.VarChar(120)
  city        String?      @db.VarChar(120)
  skills      Skill[]
  socialLinks SocialLink[]
}

model Skill {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tag       String   @unique @db.VarChar(150)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.Uuid
}

model SocialLink {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link      String   @unique @db.VarChar(350)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.Uuid
}

model Post {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String     @db.VarChar(2000)
  imageUrl  String?
  createdAt DateTime   @default(now())
  authorId  String     @db.Uuid
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     PostLike[]
  bookmarks Bookmark[]
}

model Bookmark {
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String       @db.Uuid
  postId String       @db.Uuid
  post   Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  type   BookmarkType

  @@id([userId, postId])
}

model Notification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique @db.Uuid
  toUserId   Int
  content    String
  created_at DateTime @default(now())
}

model PostLike {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.Uuid
  postId String   @db.Uuid
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  type   LikeType

  @@id([userId, postId])
}

model Comment {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content      String        @db.VarChar(2000)
  createdAt    DateTime      @default(now())
  postId       String        @db.Uuid
  authorId     String        @db.Uuid
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replyToId    String?       @db.Uuid
  replyTo      Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]     @relation(name: "ReplyTo")
  commentId    String        @db.Uuid
  commnetLikes CommentLike[]
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  comment   Comment  @relation(fields: [commnetId], references: [id], onDelete: Cascade)
  commnetId String   @db.Uuid
  type      LikeType
  createdAt DateTime @default(now())

  @@id([userId, commnetId])
}

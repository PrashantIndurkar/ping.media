generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Likes Types
// enum LikeType {
//   LIKE
//   DISLIKE
// }

// Bookmark Types
enum BookmarkType {
  BOOKEMARED
  UNBOOKMARKED
}

model Profile {
  id          String       @id @default(cuid())
  image       String?
  // add limit to the bio field
  bio         String?      @db.VarChar(150)
  website     String?      @db.VarChar(150)
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pronouns    String?      @db.VarChar(60)
  country     String?      @db.VarChar(120)
  city        String?      @db.VarChar(120)
  skills      Skill[]
  socialLinks SocialLink[]
}

model Skill {
  id        String   @id @default(cuid())
  tag       String   @unique @db.VarChar(150)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model SocialLink {
  id        String   @id @default(cuid())
  link      String   @unique @db.VarChar(350)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model Post {
  id        String     @id @default(cuid())
  content   String     @db.VarChar(2000)
  imageUrl  String?
  createdAt DateTime   @default(now())
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     PostLike[]
  bookmarks Bookmark[]
}

model Bookmark {
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  postId String
  post   Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  type   BookmarkType

  @@id([userId, postId])
}

model Notification {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  toUserId   Int
  content    String
  created_at DateTime @default(now())
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  // type   LikeType

  @@id([userId, postId])
}

model Comment {
  id           String        @id @default(cuid())
  content      String        @db.VarChar(2000)
  createdAt    DateTime      @default(now())
  postId       String
  authorId     String
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replyToId    String?
  replyTo      Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]     @relation(name: "ReplyTo")
  commentId    String
  commentLikes CommentLike[]
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commnetId], references: [id], onDelete: Cascade)
  commnetId String
  // type      LikeType
  createdAt DateTime @default(now())

  @@id([userId, commnetId])
}

// Google Auth Schema

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]
  bookmarks     Bookmark[]
  notifications Notification[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
